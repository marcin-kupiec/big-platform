Provisioners
  - not the best practice as terraform cannot track changes that they make

  resource "null_resource" "dummy_resource" {

    provisioner "local-exec" {
      command = "echo '0' > status.txt"
    }

    provisioner "local-exec" {
      when    = destroy
      command = "echo '1' > status.txt"
    }

  }

State commands
  - terraform state list   - lists all resources tracked by Terraform State file
  - terraform state rm     - remove resource from being tracked
  - terraform state show   - get details of tracked resource

Provider docker
  - terraform instead of docker-compose?

Remote state storage
  - save state remotely, e.g. to S3
  - allows sharing state file between distributed teams
  - allows locking state so parallel executions do not coincide
  - enables sharing output values with other Terraform configuration or code

Terraform apply locks
  - use of the dynamodb table with a LockID string field

Terraform workspaces
    - allows to have different states for each workspace
    - can use {terraform.workspace} to distinguish configuration
        e.g.    tag: Name = {terraform.workspace}.ec2
                replicas = {terraform.workspace} = "default" ? 5 : 2
    - could be useful to have e.g. production and integration envs?
        - same tfm code but for int less replicas, etc