Provisioners
  - not the best practice as terraform cannot track changes that they make

  resource "null_resource" "dummy_resource" {

    provisioner "local-exec" {
      command = "echo '0' > status.txt"
    }

    provisioner "local-exec" {
      when    = destroy
      command = "echo '1' > status.txt"
    }

  }

State commands
  - terraform state list   - lists all resources tracked by Terraform State file
  - terraform state rm     - remove resource from being tracked
  - terraform state show   - get details of tracked resource

Provider docker
  - terraform instead of docker-compose?

Remote state storage
  - save state remotely, e.g. to S3
  - allows sharing state file between distributed teams
  - allows locking state so parallel executions do not coincide
  - enables sharing output values with other Terraform configuration or code

Terraform apply locks
  - use of the dynamodb table with a LockID string field

Terraform workspaces
    - allows to have different states for each workspace
    - can use {terraform.workspace} to distinguish configuration
        e.g.    tag: Name = {terraform.workspace}.ec2
                replicas = {terraform.workspace} = "default" ? 5 : 2
    - could be useful to have e.g. production and integration envs?
        - same tfm code but for int less replicas, etc

Modules

    terraform.io:
        - Modules can also call other modules using a module block, but we recommend keeping the module tree relatively
        flat and using module composition as an alternative to a deeply-nested tree of modules, because this makes the
        individual modules easier to re-use in different combinations.

        - We do not recommend writing modules that are just thin wrappers around single other resource types.
        If you have trouble finding a name for your module that isn't the same as the main resource type inside it,
        that may be a sign that your module is not creating any new abstraction and so the module is adding unnecessary
        complexity. Just use the resource type directly in the calling module instead.

        - Terraform files must exist in the root directory of the repository.

        - Any nested module with a README.md is considered usable by an external user. If a README doesn't exist, it is
        considered for internal use only.

        - If a repository or package contains multiple nested modules, they should ideally be composable by the caller,
        rather than calling directly to each other and creating a deeply-nested tree of modules.

        - Each resource in the configuration must be associated with one provider configuration. Provider configurations,
        unlike most other concepts in Terraform, are global to an entire Terraform configuration and can be shared
        across module boundaries. Provider configurations can be defined only in a root Terraform module.

        - For convenience in simple configurations, a child module automatically inherits default (un-aliased) provider
        configurations from its parent. This means that explicit provider blocks appear only in the root module, and
        downstream modules can simply declare resources for that provider and have them automatically associated with
        the root provider configurations.
